============================= test session starts ==============================
platform linux2 -- Python 2.7.10 -- pytest-2.3.5
collected 4 items

astra_recon_cpu_test.py .F..

=================================== FAILURES ===================================
________________________ AstraReconCpuTest.test_process ________________________

self = <savu.test.astra_recon_cpu_test.AstraReconCpuTest testMethod=test_process>

    def test_process(self):
        print "Running the test process"
    
        try:
            plugin = tu.load_class(self.plugin_name)
            if self.plugin_name == base_class_name:
                self.assertRaises(NotImplementedError, plugin.process, "test", "test", "test")
                return
    
            options = tu.set_experiment(self.data_type)
            tu.set_plugin_list(options, self.plugin_name)
>           PluginRunner(options)

plugin_test.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <savu.core.plugin_runner.PluginRunner object at 0x7f1b6a1c5d90>
options = {'data_file': '/home/qmm55171/Documents/Git/git_repos/Savu/test_data/24737.nxs', 'loader': 'savu.plugins.nxtomo_loader', 'mpi': False, 'out_path': '/tmp', ...}

    def __init__(self, options):
        class_name = "savu.core.transports." + options["transport"] + "_transport"
        self.add_base(self.import_class(class_name))
        self.transport_control_setup(options)
>       self.run_plugin_list(options)

../core/plugin_runner.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <savu.core.plugin_runner.PluginRunner object at 0x7f1b6a1c5d90>
options = {'data_file': '/home/qmm55171/Documents/Git/git_repos/Savu/test_data/24737.nxs', 'loader': 'savu.plugins.nxtomo_loader', 'mpi': False, 'out_path': '/tmp', ...}

    def run_plugin_list(self, options):
        logging.info("Starting to run the plugin list")
        experiment = Experiment(options)
        plugin_list = experiment.meta_data.plugin_list.plugin_list
    
        experiment.barrier()
        logging.info("Preparing to run the plugin list check")
        self.run_plugin_list_check(experiment, plugin_list)
    
        experiment.barrier()
        logging.info("Initialising metadata")
        expInfo = experiment.meta_data
        if expInfo.get_meta_data("process") is 0:
            logging.debug("Running process List.save_list_to_file")
            expInfo.plugin_list.save_plugin_list(
                expInfo.get_meta_data("nxs_filename"))
    
        experiment.barrier()
        logging.info("load relevant metadata")
        expInfo.set_transport_meta_data()  # *** do I need this?
    
        experiment.barrier()
        logging.info("divert to transport process and run process list")
>       self.transport_run_plugin_list(experiment)

../core/plugin_runner.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <savu.core.plugin_runner.PluginRunner object at 0x7f1b6a1c5d90>
exp = <savu.data.experiment_collection.Experiment object at 0x7f1b6a1cd7d0>

    def transport_run_plugin_list(self, exp):
        """
            Runs a chain of plugins
            """
    
        print "**** Running the plugin chain"
        exp.barrier()
        logging.info("Starting the HDF5 plugin list runner")
        plugin_list = exp.meta_data.plugin_list.plugin_list
    
        exp.barrier()
        logging.info("run the loader plugin")
        self.plugin_loader(exp, plugin_list[0])
    
        exp.barrier()
        logging.info("create all output data_objects and backing files")
        in_data = exp.index["in_data"][exp.index["in_data"].keys()[0]]
        out_data_objects = in_data.load_data(self, exp)
    
        exp.barrier()
        logging.info("clear all out_data objects in experiment dictionary")
        exp.clear_data_objects()
    
        exp.barrier()
        logging.info("Load all the plugins")
        self.plugin_loader(exp, plugin_list[0])
    
        exp.barrier()
        logging.info("Running all the plugins")
    
        for i in range(1, len(plugin_list)-1):
            logging.info("Running Plugin %s" % plugin_list[i]["id"])
            exp.barrier()
    
            logging.info("Initialise output data")
            for key in out_data_objects[i-1]:
                exp.index["out_data"][key] = out_data_objects[i-1][key]
    
            exp.barrier()
            logging.info("Load the plugin")
            plugin = self.plugin_loader(exp, plugin_list[i], pos=i)
    
            exp.barrier()
            logging.info("run the plugin")
>           plugin.run_plugin(exp, self)

../core/transports/hdf5_transport.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <savu.plugins.astra_recon_cpu.AstraReconCpu object at 0x7f1b6a1daad0>
exp = <savu.data.experiment_collection.Experiment object at 0x7f1b6a1cd7d0>
transport = <savu.core.plugin_runner.PluginRunner object at 0x7f1b6a1c5d90>

    def run_plugin(self, exp, transport):
    
        expInfo = exp.meta_data
        processes = expInfo.get_meta_data("processes")
        process = expInfo.get_meta_data("process")
    
        count = 0
        cpu_processes = []
        for i in ["CPU" in i for i in processes]:
            if i:
                cpu_processes.append(count)
                count += 1
            else:
                cpu_processes.append(-1)
        if cpu_processes[process] >= 0:
            logging.debug("Running the CPU Process %i", process)
            new_processes = [i for i in processes if "CPU" in i]
    
            logging.debug("Pre-processing")
    
            params = self.pre_process(exp)
            if params is None:
                params = []
    
            logging.debug("Main processing: process %s", self.__class__)
            #self.process(exp, new_processes, cpu_processes[process])
>           self.process(exp, transport, params)

../plugins/driver/cpu_plugin.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <savu.plugins.astra_recon_cpu.AstraReconCpu object at 0x7f1b6a1daad0>
args = (<savu.data.experiment_collection.Experiment object at 0x7f1b6a1cd7d0>, <savu.core.plugin_runner.PluginRunner object a...  , -80.2   , -78.2   ,
       -76....,
        79.8   ,  81.8   ,  83.8   ,  85.8   ,  87.8   ,  89.8   ,  91.7999])])
kwds = {}

    def _wrapper(self, *args, **kwds):
        logging.info("Start::%s.%s:%s" % (func.__module__, self.__class__.__name__, func.__name__))
>       returnval = func(self, *args, **kwds)

../core/utils.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <savu.plugins.astra_recon_cpu.AstraReconCpu object at 0x7f1b6a1daad0>
exp = <savu.data.experiment_collection.Experiment object at 0x7f1b6a1cd7d0>
transport = <savu.core.plugin_runner.PluginRunner object at 0x7f1b6a1c5d90>
params = [array([-88.2   , -86.2   , -84.2001, -82.2   , -80.2   , -78.2   ,
       -76....,
        79.8   ,  81.8   ,  83.8   ,  85.8   ,  87.8   ,  89.8   ,  91.7999])]

    @logmethod
    def process(self, exp, transport, params):
        """
            Perform the main processing step for the plugin
            """
        in_data = self.get_data_objects(exp.index, "in_data")
        out_data = self.get_data_objects(exp.index, "out_data")
    
        try:
            centre_of_rotation = in_data[0].meta_data.get_meta_data("centre_of_rotation")
        except KeyError:
            centre_of_rotation = np.ones(in_data[0].get_nPattern())
            centre_of_rotation = centre_of_rotation * self.parameters['center_of_rotation']
            in_data[0].meta_data.set_meta_data("centre_of_rotation", centre_of_rotation)
    
>       transport.reconstruction_setup(self, in_data, out_data, exp.meta_data, params)

../plugins/base_recon.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <savu.core.plugin_runner.PluginRunner object at 0x7f1b6a1c5d90>
args = (<savu.plugins.astra_recon_cpu.AstraReconCpu object at 0x7f1b6a1daad0>, [<savu.data.data_structures.Data object at 0x7...  , -80.2   , -78.2   ,
       -76....,
        79.8   ,  81.8   ,  83.8   ,  85.8   ,  87.8   ,  89.8   ,  91.7999])])
kwds = {}

    def _wrapper(self, *args, **kwds):
        logging.info("Start::%s.%s:%s" % (func.__module__, self.__class__.__name__, func.__name__))
>       returnval = func(self, *args, **kwds)

../core/utils.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <savu.core.plugin_runner.PluginRunner object at 0x7f1b6a1c5d90>
plugin = <savu.plugins.astra_recon_cpu.AstraReconCpu object at 0x7f1b6a1daad0>
in_data = <savu.data.data_structures.Data object at 0x7f1b6a1dab50>
out_data = <savu.data.data_structures.Data object at 0x7f1b70a35d90>
expInfo = <savu.data.meta_data.MetaData object at 0x7f1b6a1cd810>
params = [array([-88.2   , -86.2   , -84.2001, -82.2   , -80.2   , -78.2   ,
       -76....,
        79.8   ,  81.8   ,  83.8   ,  85.8   ,  87.8   ,  89.8   ,  91.7999])]

    @logmethod
    def reconstruction_setup(self, plugin, in_data, out_data, expInfo, params):
    
        in_data = in_data[0]
        out_data = out_data[0]
    
        [slice_list, frame_list] = in_data.get_slice_list_per_process(expInfo)
        cor = in_data.meta_data.get_meta_data("centre_of_rotation")[frame_list]
    
        count = 0
        for sl in slice_list:
            frame = plugin.reconstruct(np.squeeze(in_data.data[sl]),
                                       cor[count],
                                       out_data.get_pattern_shape(),
>                                      params)

../core/transports/hdf5_transport.py:218: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <savu.plugins.astra_recon_cpu.AstraReconCpu object at 0x7f1b6a1daad0>
sinogram = array([[ 0.0111733 ,  0.01104984,  0.01104984, ...,  0.01092907,
         0.01... 0.01081092,  0.0114287 , ...,  0.00947874,
         0.01081092,  0.01036279]])
centre_of_rotations = 86.0, vol_shape = (160, 160)
params = [array([-88.2   , -86.2   , -84.2001, -82.2   , -80.2   , -78.2   ,
       -76....,
        79.8   ,  81.8   ,  83.8   ,  85.8   ,  87.8   ,  89.8   ,  91.7999])]

    def reconstruct(self, sinogram, centre_of_rotations, vol_shape, params):
    
        angles = params[0]
    
        nSinos = self.get_max_frames()
        lparams = self.get_parameters()
        alg_name = lparams[0]
        iterations = lparams[1]
    
        ctr = centre_of_rotations
        width = sinogram.shape[1]
        pad = 50
    
        sino = np.nan_to_num(1./sinogram)
    
        # pad the array so that the centre of rotation is in the middle
        alen = ctr
        blen = width - ctr
        mid = width / 2.0
    
        if (ctr > mid):
            plow = pad
            phigh = (alen - blen) + pad
        else:
            plow = (blen - alen) + pad
            phigh = pad
    
        logdata = np.squeeze(np.log(sino+1))
    
        sinogram = np.pad(logdata, ((0, 0), (int(plow), int(phigh))),
                          mode='reflect')
    
        if not "3D" in alg_name:
            rec = self.reconstruct2D(sinogram, angles, vol_shape, alg_name,
>                                    iterations)

../plugins/base_astra_recon.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <savu.plugins.astra_recon_cpu.AstraReconCpu object at 0x7f1b6a1daad0>
sinogram = array([[ 0.0111733 ,  0.01104984,  0.01104984, ...,  0.01092907,
         0.01... 0.01081092,  0.0114287 , ...,  0.00947874,
         0.01081092,  0.01036279]])
angles = array([-88.2   , -86.2   , -84.2001, -82.2   , -80.2   , -78.2   ,
       -76....,
        79.8   ,  81.8   ,  83.8   ,  85.8   ,  87.8   ,  89.8   ,  91.7999])
shape = (160, 160), alg_name = 'FBP', iterations = 1

    def reconstruct2D(self, sinogram, angles, shape, alg_name, iterations):
    
        vol_geom = astra.create_vol_geom(shape[0], shape[1])
    
        proj_geom = astra.create_proj_geom('parallel', 1.0, sinogram.shape[1],
                                           np.deg2rad(angles))
    
>       sinogram_id = astra.data2d.create("-sino", proj_geom, sinogram)

../plugins/base_astra_recon.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

datatype = '-sino'
geometry = {'DetectorCount': 272, 'DetectorWidth': 1.0, 'ProjectionAngles': array([-1.5393804 , -1.50447382, -1.46956898, -1.4346...39975406,
      ...67933,  1.46258591,  1.4974925 ,  1.53239908,  1.56730567,
        1.60221051]), 'type': 'parallel'}
data = array([[ 0.0111733 ,  0.01104984,  0.01104984, ...,  0.01092907,
         0.01... 0.01081092,  0.0114287 , ...,  0.00947874,
         0.01081092,  0.01036279]])

    def create(datatype, geometry, data=None):
        """Create a 2D object.
    
        :param datatype: Data object type, '-vol' or '-sino'.
        :type datatype: :class:`string`
        :param geometry: Volume or projection geometry.
        :type geometry: :class:`dict`
        :param data: Data to fill the constructed object with, either a scalar or array.
        :type data: :class:`float` or :class:`numpy.ndarray`
        :returns: :class:`int` -- the ID of the constructed object.
    
        """
>       return d.create(datatype,geometry,data)

/dls_sw/apps/python/anaconda/1.7.0/64/lib/python2.7/site-packages/astra/data2d.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???

data2d_c.pyx:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???

data2d_c.pyx:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   Exception: The dimensions of the data do not match those specified in the geometry.

data2d_c.pyx:120: Exception
------------------------------- Captured stdout --------------------------------
Running the test process
[{'data': {}, 'name': 'NxtomoLoader', 'id': 'savu.plugins.nxtomo_loader'}, {'data': {'in_datasets': ['tomo'], 'out_datasets': ['tomo']}, 'name': 'AstraReconCpu', 'id': 'savu.plugins.astra_recon_cpu'}, {'data': {}, 'name': 'Hdf5TomoSaver', 'id': 'savu.plugins.hdf5_tomo_saver'}]
Plugin list check complete!
**** Running the plugin chain
get_data_objects ['tomo']
get_data_objects ['tomo']
get_data_objects ['tomo']
(1,) [135]
------------------------------- Captured stderr --------------------------------
INFO:root:Starting the reconstruction pipeline process
INFO:root:Starting to run the plugin list
INFO:root:Preparing to run the plugin list check
INFO:root:Checking loaders and Savers
DEBUG:root:getting class
DEBUG:root:plugin name is savu.plugins.nxtomo_loader
DEBUG:root:about to import the module
DEBUG:root:Getting the module
DEBUG:root:about to split the name
DEBUG:root:getting the classname from the module
DEBUG:root:getting the class from the classname
DEBUG:root:getting class instance
DEBUG:root:returning class instance
DEBUG:root:getting class
DEBUG:root:plugin name is savu.plugins.hdf5_tomo_saver
DEBUG:root:about to import the module
DEBUG:root:Getting the module
DEBUG:root:about to split the name
DEBUG:root:getting the classname from the module
DEBUG:root:getting the class from the classname
DEBUG:root:getting class instance
DEBUG:root:returning class instance
INFO:root:Running plugins with the check flag
DEBUG:root:Running plugin loader
DEBUG:root:getting class
DEBUG:root:plugin name is savu.plugins.nxtomo_loader
DEBUG:root:about to import the module
DEBUG:root:Getting the module
DEBUG:root:about to split the name
DEBUG:root:getting the classname from the module
DEBUG:root:getting the class from the classname
DEBUG:root:getting class instance
DEBUG:root:returning class instance
DEBUG:root:Getting pos and checkflag
DEBUG:root:Doing something with the check flag
DEBUG:root:setting parameters
DEBUG:root:Running plugin setup
INFO:root:Start::savu.plugins.nxtomo_loader.NxtomoLoader:setup
DEBUG:root:Creating file 'tomo_entry' '/home/qmm55171/Documents/Git/git_repos/Savu/test_data/24737.nxs'
INFO:root:Finish::savu.plugins.nxtomo_loader.NxtomoLoader:setup
DEBUG:root:finished plugin loader
INFO:root:Checking Plugin AstraReconCpu
DEBUG:root:Running plugin loader
DEBUG:root:getting class
DEBUG:root:plugin name is savu.plugins.astra_recon_cpu
DEBUG:root:about to import the module
DEBUG:root:Getting the module
DEBUG:root:about to split the name
DEBUG:root:getting the classname from the module
DEBUG:root:getting the class from the classname
DEBUG:root:getting class instance
DEBUG:root:returning class instance
DEBUG:root:Getting pos and checkflag
DEBUG:root:Doing something with the check flag
DEBUG:root:setting parameters
DEBUG:root:Running plugin setup
DEBUG:root:finished plugin loader
INFO:root:empty the data object dictionaries
INFO:root:Plugin list check complete!
INFO:root:Initialising metadata
DEBUG:root:Running process List.save_list_to_file
INFO:root:load relevant metadata
INFO:root:divert to transport process and run process list
INFO:root:Starting the HDF5 plugin list runner
INFO:root:run the loader plugin
DEBUG:root:Running plugin loader
DEBUG:root:getting class
DEBUG:root:plugin name is savu.plugins.nxtomo_loader
DEBUG:root:about to import the module
DEBUG:root:Getting the module
DEBUG:root:about to split the name
DEBUG:root:getting the classname from the module
DEBUG:root:getting the class from the classname
DEBUG:root:getting class instance
DEBUG:root:returning class instance
DEBUG:root:Getting pos and checkflag
DEBUG:root:Doing something with the check flag
DEBUG:root:setting parameters
DEBUG:root:Running plugin setup
INFO:root:Start::savu.plugins.nxtomo_loader.NxtomoLoader:setup
DEBUG:root:Creating file 'tomo_entry' '/home/qmm55171/Documents/Git/git_repos/Savu/test_data/24737.nxs'
INFO:root:Finish::savu.plugins.nxtomo_loader.NxtomoLoader:setup
DEBUG:root:finished plugin loader
INFO:root:create all output data_objects and backing files
DEBUG:root:getting class
DEBUG:root:plugin name is savu.plugins.hdf5_tomo_saver
DEBUG:root:about to import the module
DEBUG:root:Getting the module
DEBUG:root:about to split the name
DEBUG:root:getting the classname from the module
DEBUG:root:getting the class from the classname
DEBUG:root:getting class instance
DEBUG:root:returning class instance
DEBUG:root:generating all output files
DEBUG:root:Loading plugin savu.plugins.astra_recon_cpu
DEBUG:root:Experimental Parameters for Point 1
DEBUG:root:in data (tomo) shape = (111, 135, 160)
DEBUG:root:out data (tomo) shape = (111, 135, 160)
DEBUG:root:Running plugin loader
DEBUG:root:getting class
DEBUG:root:plugin name is savu.plugins.astra_recon_cpu
DEBUG:root:about to import the module
DEBUG:root:Getting the module
DEBUG:root:about to split the name
DEBUG:root:getting the classname from the module
DEBUG:root:getting the class from the classname
DEBUG:root:getting class instance
DEBUG:root:returning class instance
DEBUG:root:Getting pos and checkflag
DEBUG:root:Doing something with the check flag
DEBUG:root:setting parameters
DEBUG:root:Running plugin setup
DEBUG:root:finished plugin loader
DEBUG:root:Experimental Parameters for Point 2
DEBUG:root:in data (tomo) shape = (111, 135, 160)
DEBUG:root:out data (tomo) shape = (111, 135, 160)
DEBUG:root:(set_filenames) Creating output file after barrier /tmp/00_savu.plugins.astra_recon_cpu_tomo.h5
INFO:root:Start::savu.plugins.hdf5_tomo_saver.Hdf5TomoSaver:setup
DEBUG:root:Creating file '{'tomo': '0-AstraReconCpu'}' '/tmp/00_savu.plugins.astra_recon_cpu_tomo.h5'
INFO:root:Finish::savu.plugins.hdf5_tomo_saver.Hdf5TomoSaver:setup
DEBUG:root:Experimental Parameters for Point 3
DEBUG:root:in data (tomo) shape = (160, 135, 160)
DEBUG:root:out data (tomo) shape = (160, 135, 160)
INFO:root:clear all out_data objects in experiment dictionary
INFO:root:Load all the plugins
DEBUG:root:Running plugin loader
DEBUG:root:getting class
DEBUG:root:plugin name is savu.plugins.nxtomo_loader
DEBUG:root:about to import the module
DEBUG:root:Getting the module
DEBUG:root:about to split the name
DEBUG:root:getting the classname from the module
DEBUG:root:getting the class from the classname
DEBUG:root:getting class instance
DEBUG:root:returning class instance
DEBUG:root:Getting pos and checkflag
DEBUG:root:Doing something with the check flag
DEBUG:root:setting parameters
DEBUG:root:Running plugin setup
INFO:root:Start::savu.plugins.nxtomo_loader.NxtomoLoader:setup
DEBUG:root:Creating file 'tomo_entry' '/home/qmm55171/Documents/Git/git_repos/Savu/test_data/24737.nxs'
INFO:root:Finish::savu.plugins.nxtomo_loader.NxtomoLoader:setup
DEBUG:root:finished plugin loader
INFO:root:Running all the plugins
INFO:root:Running Plugin savu.plugins.astra_recon_cpu
INFO:root:Initialise output data
INFO:root:Load the plugin
DEBUG:root:Running plugin loader
DEBUG:root:getting class
DEBUG:root:plugin name is savu.plugins.astra_recon_cpu
DEBUG:root:about to import the module
DEBUG:root:Getting the module
DEBUG:root:about to split the name
DEBUG:root:getting the classname from the module
DEBUG:root:getting the class from the classname
DEBUG:root:getting class instance
DEBUG:root:returning class instance
DEBUG:root:Getting pos and checkflag
DEBUG:root:Doing something with the check flag
DEBUG:root:setting parameters
DEBUG:root:Running plugin setup
DEBUG:root:finished plugin loader
INFO:root:run the plugin
DEBUG:root:Running the CPU Process 0
DEBUG:root:Pre-processing
DEBUG:root:Main processing: process <class 'savu.plugins.astra_recon_cpu.AstraReconCpu'>
INFO:root:Start::savu.plugins.base_recon.AstraReconCpu:process
INFO:root:Start::savu.core.transports.hdf5_transport.PluginRunner:reconstruction_setup
/home/qmm55171/Documents/Git/git_repos/Savu/savu/plugins/base_astra_recon.py:79: RuntimeWarning: divide by zero encountered in divide
  sino = np.nan_to_num(1./sinogram)
/dls_sw/apps/python/anaconda/1.7.0/64/lib/python2.7/site-packages/astra/data2d.py:53: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  return d.create(datatype,geometry,data)
====================== 1 failed, 3 passed in 0.79 seconds ======================
