#%Module1.0#####################################################################
##
## Savu modulefile
##
proc ModulesHelp { } {
	global version

        puts stderr "\tLoads version $version of Savu"
        puts stderr "\n\tSavu is a pipeline for running tomography "
        puts stderr "\treconstruction routines on the cluster at diamond "
}

module-whatis "loads Savu developer version"

set version 1.2
set conda_env savu_test_env3
set redhatrelease [eval exec "cat /etc/redhat-release"]
set mach $tcl_platform(machine)
set pymajorversion 2.7
set version 4.2.12
set openmpi_version 1.6.5
set cuda_version 7.0
set fftw_version 3.3.3
set PROMPT {[\u@\h \W]\$ }

module load global/cluster

set mach $tcl_platform(machine)
if { [string compare $mach "x86_64"] != 0} {
    puts stderr "Cannot load/unload: this is for 64-bit machines only!"
    return 1
}
set arch 64


if { [module-info mode load] } {
  puts stderr "\tLoading $arch-bit Anaconda Python, version $version"

  # load the default directories
  if { ! [is-loaded global/directories] } {
    module load global/directories
  }

  # check to see if python is already loaded
  if { [is-loaded python] } {   
    if { [is-loaded savu/dev] } {
        puts stderr "\tAlready loaded!"
        exit 0
    }
    if { [is-loaded scipy] } {
        puts stderr "\tUnloading scipy"
        module unload scipy
    }
    if { [is-loaded numpy] } {
        puts stderr "\tUnloading numpy"
        module unload numpy
    }
    puts stderr "\tUnloading python"
    module unload python
  }

  # load FFTW shared libraries
  if { ! [is-loaded fftw/$fftw_version] } {
    if { [is-loaded fftw] } {
        module unload fftw
    }
    module load fftw/$fftw_version
  }

  # load CUDA shared libraries
  if { ! [is-loaded cuda/$cuda_version] } {
    if { [is-loaded cuda] } {
        module unload cuda
    }
    module load cuda/$cuda_version
  }

  # load openmpi shared libraries
  if { ! [is-loaded openmpi/$openmpi_version] } {
    if { [is-loaded openmpi] } {
        module unload openmpi
    }
    module load openmpi/$openmpi_version
  }

  # load the default directories
  if { ! [is-loaded global/directories] } {
    module load global/directories
  }
} else {
  puts stderr "Unloading $arch-bit Anaconda Python, version $version"
  puts stdout "source deactivate;"

  # unload default directories
  if { [is-loaded global/directories] } {
    module unload global/directories
  }

  # unload FFTW shared libraries
  if { [is-loaded fftw/$fftw_version] } {
    module unload fftw/$fftw_version
  }

  # unload CUDA shared libraries
  if { [is-loaded cuda/$cuda_version] } {
    module unload cuda/$cuda_version
  }

  # unload openmpi shared libraries
  if { [is-loaded openmpi/$openmpi_version] } {
    module unload openmpi/$openmpi_version
  }
  unsetenv CONDA_DEFAULT_ENV
  unsetenv CONDA_PREFIX
  unsetenv CONDA_PS1_BACKUP
  unsetenv PS1 $PROMPT
}

set PYTHON_HOME $env(softwaredir)/savu/anaconda
setenv pythonmajorversion $pymajorversion
prepend-path PATH $PYTHON_HOME/bin
setenv PYTHONNOUSERSITE True
puts stdout "source $PYTHON_HOME/bin/activate $conda_env;"
setenv CONDA_PATH_BACKUP $env(PATH)
prepend-path PATH $PYTHON_HOME/envs/$conda_env/bin

if { [info exists env(SAVUHOME)] } {
  puts stderr "\n\tSAVUHOME is set to $env(SAVUHOME)\n"
  prepend-path PATH $env(SAVUHOME)
  prepend-path PYTHONPATH $env(SAVUHOME)
  set-alias "savu_mpi_dev" "$env(SAVUHOME)/mpi/dls/savu_launcher_dev.sh"
  set-alias "savu_mpi" "savu_launcher.sh"
} else {
  set-alias "savu_mpi" "savu_launcher.sh -s cs04r-sc-serv-14"
  set-alias "savu" "savu -s cs04r-sc-serv-14"
}

